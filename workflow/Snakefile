import sys
import peppy
from Bio import SeqIO
from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()
FTP = FTPRemoteProvider()

# DETERMINE REMOTE OR LOCAL RESOURCE
def determine_resource(path):
    if "ftp://" in path:
         return FTP.remote(path, immediate_close = True)
    elif "http://" in path:
         return HTTP.remote(path.replace("http://",""))
    elif "https://" in path:
         return HTTP.remote(path.replace("https://",""))
    else:
        return path

singularity: "docker://continuumio/miniconda3"
configfile: "config/config.yaml"
pepfile: "config/pep.yaml"

SAMPLES = [x.sample_name for x in pep.samples]
SUBSAMPLE_TABLE = pep.subsample_table
TES = [x.id.split("#")[0] for x in SeqIO.parse(config.get("TRANSPOSON_FASTA"), "fasta")]

MAIN_CONFIG = config.get("MAIN_CONFIG",'config/config.yaml')

subworkflow custom_genome:
    workdir:
        "../../gte21-custom-genome/"
    snakefile:
        "../../gte21-custom-genome/workflow/Snakefile"
    configfile:
        MAIN_CONFIG


rule all:
    input:
        expand('results/copies/{s}.csv',s=SAMPLES),
        "results/snps/snps.vcf",
        expand('results/pileups/{s}.pileups.csv.gz',s=SAMPLES),

rule samtools_index:
    input:
        "{file}.bam"
    output:
        "{file}.bam.bai"
    params:
        "" # optional params string
    wrapper:
        "https://github.com/snakemake/snakemake-wrappers/raw/0.70.0/bio/samtools/index"


include: "rules/trim.smk"
include: "rules/align-wgs.smk"
include: "rules/depth.smk"
include: "rules/snps.smk"
